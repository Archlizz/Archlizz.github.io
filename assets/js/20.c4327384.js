(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{598:function(n,t,e){"use strict";e.r(t);var a=e(1),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"fox3-0-常用工具类介绍-android"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fox3-0-常用工具类介绍-android"}},[n._v("#")]),n._v(" Fox3.0 常用工具类介绍(Android)")]),n._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#_1、configpreference-配置"}},[n._v("1、ConfigPreference 配置")])]),e("li",[e("a",{attrs:{href:"#_2、fileaccessor-文件访问器"}},[n._v("2、FileAccessor 文件访问器")])]),e("li",[e("a",{attrs:{href:"#_3、httprequester-http访问器"}},[n._v("3、HttpRequester HTTP访问器")]),e("ul",[e("li",[e("a",{attrs:{href:"#步骤一：获取应用对应的httpreuester（session共享）"}},[n._v("步骤一：获取应用对应的HttpReuester（session共享）")])]),e("li",[e("a",{attrs:{href:"#步骤二：进行http通信，其接口如下"}},[n._v("步骤二：进行http通信，其接口如下")])])])]),e("li",[e("a",{attrs:{href:"#安全管理器-securitymanager"}},[n._v("安全管理器 SecurityManager")]),e("ul",[e("li",[e("a",{attrs:{href:"#securitymanager接口说明"}},[n._v("SecurityManager接口说明")])]),e("li",[e("a",{attrs:{href:"#icipher接口说明"}},[n._v("ICipher接口说明")])])])])])]),e("p"),n._v(" "),e("h2",{attrs:{id:"_1、configpreference-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、configpreference-配置"}},[n._v("#")]),n._v(" 1、ConfigPreference 配置")]),n._v(" "),e("p",[n._v("ConfigPreference是Fox移动平台中获取和设置配置的工具类型，我们可以通过该工具类获取client.properties中的配置。")]),n._v(" "),e("p",[n._v("例如：\nclient.poperties配置如下：")]),n._v(" "),e("pre",[e("code",[n._v("#主工程\nweb/mainApp=fox\n\n#回退键事件\nweb/backAction=javascript:fox.custom.back()\n\n#安全配置\nsecurity/scopes=[Http]\n#security/scopes=[]\n\n#是否启用更新\nversion/updateEnabled=false\n\n#版本服务器地址\nversion/address=http://139.199.79.118:9705\n")])]),n._v(" "),e("p",[n._v("获取client.properties中的配置")]),n._v(" "),e("pre",[e("code",[n._v('  // 获取配置\n  ConfigPreference pref = ConfigPreference.getInstance();\n  //获取回退action\n  String backAction = pref.getString("web", "backAction", "");\n')])]),n._v(" "),e("h2",{attrs:{id:"_2、fileaccessor-文件访问器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、fileaccessor-文件访问器"}},[n._v("#")]),n._v(" 2、FileAccessor 文件访问器")]),n._v(" "),e("p",[n._v("FileAccessor文件访问器，为每个应用的沙箱提供了操作的接口。\n其使用方法如下：")]),n._v(" "),e("p",[n._v("步骤一：获取应用对应的FileAccessor")]),n._v(" "),e("pre",[e("code",[n._v('FileAccessor fileAccessor = FileAccessor.get("应用名")\n')])]),n._v(" "),e("p",[n._v("步骤二：操作文件系统，常用接口如下")]),n._v(" "),e("pre",[e("code",[n._v("       /**\n         * 获取应用的根目录\n         * @return\n         */\n        public String getRoot()\n    \n        /**\n         * 获取应用的根目录的文件路径\n         * @return\n         */\n        public File getRootFile(String path)\n    \n        /**\n         * 获取应用的根目录的文件路径\n         * @return\n         */\n        public String getRootFilePath(String path)\n        \n        /**\n         * 获取应用的工作目录\n         * @return\n         */\n        public String getWorkspace()\n    \n    \n        /**\n         * 获取文件路径\n         * @param path\n         * @return\n         */\n        public File getWorkspaceFile(String path)\n    \n        /**\n         * 获取文件路径\n         * @param path\n         * @return\n         */\n        public String getWorkspaceFilePath(String path)\n    \n    \n        //判断是否属于保护区\n        public boolean isProtectionZone(String path)\n    \n        /**\n         * 创建此抽象路径名指定的目录，包括创建必需但不存在的父目录\n         *\n         * @param path\n         * @return\n         */\n        public boolean mkdirs(String path)\n    \n        /**\n         * 创建此抽象路径名指定的目录，包括创建必需但不存在的父目录\n         *\n         * @param file\n         * @return\n         */\n        public boolean mkdirs(File file)\n    \n        /**\n         * 创建文件\n         *\n         * @param path\n         * @return\n         * @throws IOException\n         */\n        public File createNewFile(String path) throws IOException\n    \n        /**\n         * 创建文件\n         *\n         * @param file\n         * @return\n         * @throws IOException\n         */\n        public File createNewFile(File file) throws IOException\n    \n        /**\n         * 设置文件循环数\n         * @param maxCircleCount\n         */\n        public void setMaxCircleCount(int maxCircleCount)\n        \n        /**\n         * 创建循环临时文件\n         * @param parent 父亲目录\n         * @param extension 扩展名\n         * @return\n         */\n        public File createCircleFile(String parent, String extension) throws IOException\n    \n        /**\n         * 创建时间戳临时文件\n         * @param parent 父亲目录\n         * @param extension 扩展名\n         * @return\n         */\n        public File createTimeStampFile(String parent, String extension) throws IOException\n    \n        /**\n         * 判断文件或文件夹是否存在\n         *\n         * @param path\n         * @return\n         */\n        public boolean exists(String path)\n    \n        /**\n         * 测试此抽象路径名表示的文件是否是一个目录\n         *\n         * @param path\n         * @return\n         */\n        public boolean isDirectory(String path)\n    \n        /**\n         * 测试此抽象路径名表示的文件是否是一个文件\n         *\n         * @param path\n         * @return\n         */\n        public boolean isFile(String path)\n    \n        /**\n         * 打开文件\n         *\n         * @param path\n         * @return\n         */\n        public boolean openFile(String path)\n    \n        /**\n         * 打开文件\n         *\n         * @param file\n         * @return\n         */\n        public boolean openFile(File file)\n    \n        /**\n         * 打开输入流\n         *\n         * @param path\n         * @return\n         */\n        public InputStream openInputStream(String path) throws IOException\n    \n        /**\n         * 打开输入流\n         *\n         * @param file\n         * @return\n         */\n        public InputStream openInputStream(File file) throws IOException\n    \n        /**\n         * 打开输出流\n         *\n         * @param path\n         * @return\n         */\n        public OutputStream openOutputStream(String path) throws IOException \n    \n        /**\n         * 打开输出流\n         *\n         * @param file\n         * @return\n         */\n        public OutputStream openOutputStream(File file) throws IOException\n    \n    \n        /**\n         * 以BASE64字符串返回内容\n         *\n         * @param path\n         * @return\n         */\n        public String getContentAsBase64(String path)\n                throws IOException \n    \n        /**\n         * 以BASE64字符串返回内容\n         *\n         * @param file\n         * @return\n         */\n        public String getContentAsBase64(File file)\n                throws IOException \n    \n        /**\n         * 以字符串返回内容\n         *\n         * @param path\n         * @param encoding\n         * @return\n         */\n        public String getContentAsString(String path, String encoding)\n                throws IOException\n    \n        /**\n         * 以字符串返回内容\n         *\n         * @param file\n         * @param encoding\n         * @return\n         */\n        public String getContentAsString(File file, String encoding)\n                throws IOException\n    \n        /**\n         * 以字节数组返回内容\n         *\n         * @param path\n         * @return\n         * @throws\n         */\n        public byte[] getContentAsBytes(String path) throws IOException\n    \n        /**\n         * 以字节数组返回内容\n         *\n         * @param file\n         * @return\n         * @throws\n         */\n        public byte[] getContentAsBytes(File file) throws IOException\n    \n        /**\n         * 设置内容\n         *\n         * @param path\n         * @param content\n         */\n        public void setContentAsBase64(String path, String content) throws IOException\n    \n        /**\n         * 设置内容\n         *\n         * @param file\n         * @param content\n         */\n        public void setContentAsBase64(File file, String content) throws IOException\n    \n        /**\n         * 设置内容\n         *\n         * @param path\n         * @param content\n         */\n        public void setContentAsString(String path, String content, String encoding) throws IOException\n    \n        /**\n         * 设置内容\n         *\n         * @param file\n         * @param content\n         */\n        public void setContentAsString(File file, String content, String encoding) throws IOException \n        }\n    \n        /**\n         * 设置内容\n         *\n         * @param path\n         * @param content\n         */\n        public void setContentAsBytes(String path, byte[] content) throws IOException \n    \n        /**\n         * 设置内容\n         *\n         * @param file\n         * @param content\n         */\n        public void setContentAsBytes(File file, byte[] content) throws IOException \n        \n        /**\n         * 返回此抽象路径名表示的文件最后一次被修改的时间\n         *\n         * @return\n         */\n        public long lastModified(String path) \n    \n    \n        /**\n         * 返回由此抽象路径名表示的文件的长度。如果此路径名表示一个目录，则返回值是不确定的\n         *\n         * @return\n         */\n        public long length(String path) \n    \n        /**\n         * 删除此抽象路径名表示的文件或目录\n         *\n         * @param path\n         * @return\n         */\n        public boolean delete(String path)\n    \n        /**\n         * 删除此抽象路径名表示的文件或目录\n         *\n         * @param file\n         * @return\n         */\n        public boolean delete(File file)\n        \n        /**\n         * 返回一个抽象路径名数组，这些路径名表示此抽象路径名所表示目录中的文件\n         *\n         * @param path\n         * @return\n         */\n        public File[] listFiles(String path)\n    \n    \n        /**\n         * 返回一个抽象路径名数组，这些路径名表示此抽象路径名所表示目录中的文件\n         *\n         * @param file\n         * @return\n         */\n        public File[] listFiles(File file)\n    \n        /**\n         * 拷贝文件\n         *\n         * @param srcPath\n         * @param destPath\n         * @return\n         */\n        public void copy(String srcPath, String destPath) throws Exception \n    \n        /**\n         * 拷贝文件\n         *\n         * @param srcFile\n         * @param destFile\n         * @return\n         */\n        public void copy(File srcFile, File destFile) throws Exception \n    \n        /**\n         * 判断是否需要申请扩展存储空间的授权\n         *\n         * @param path\n         * @return\n         */\n        public boolean needApplyExtStoragePermission(String path)\n    \n        /**\n         * 申请访问扩展存储空间权限\n         *\n         * @param callbackContext\n         */\n        public void applyExtStoragePermission(final ICallback callbackContext)\n    \n        /**\n         * 加密文件\n         *\n         * @param srcPath\n         * @param destPath\n         * @return\n         */\n        public boolean encryptFile(String srcPath, String destPath) throws IOException \n    \n        /**\n         * 加密文件\n         *\n         * @param srcFile\n         * @param destFile\n         * @return\n         */\n        public boolean encryptFile(File srcFile, File destFile) throws IOException \n    \n    \n        /**\n         * 解密文件\n         *\n         * @param srcPath\n         * @param destPath\n         * @return\n         */\n        public boolean decryptFile(String srcPath, String destPath) throws IOException \n    \n        /**\n         * 解密文件\n         *\n         * @param srcFile\n         * @param destFile\n         * @return\n         */\n        public boolean decryptFile(File srcFile, File destFile) throws IOException \n")])]),n._v(" "),e("h2",{attrs:{id:"_3、httprequester-http访问器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、httprequester-http访问器"}},[n._v("#")]),n._v(" 3、HttpRequester HTTP访问器")]),n._v(" "),e("p",[n._v("Http访问器，为每个应用提供访问Fox Server的能力。其使用步骤如下：")]),n._v(" "),e("h3",{attrs:{id:"步骤一：获取应用对应的httpreuester（session共享）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤一：获取应用对应的httpreuester（session共享）"}},[n._v("#")]),n._v(" 步骤一：获取应用对应的HttpReuester（session共享）")]),n._v(" "),e("p",[n._v('HttpRequester httpRequester = HttpRequester.get("应用名")')]),n._v(" "),e("h3",{attrs:{id:"步骤二：进行http通信，其接口如下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤二：进行http通信，其接口如下"}},[n._v("#")]),n._v(" 步骤二：进行http通信，其接口如下")]),n._v(" "),e("pre",[e("code",[n._v("    /**\n     * ping测试\n     *\n     * @param url\n     * @param timeout\n     * @return\n     */\n    public boolean ping(String url, int timeout)\n\n    /**\n     * GET方式请求HTTP服务\n     *\n     * @param url\n     * @param params\n     * @param data\n     * @param encoding\n     * @param timeout\n     * @return\n     */\n    public HttpResponse get(String url, Map<String, String> params,\n                                   Map<String, String> data, String encoding, int timeout) throws Exception\n\n    /**\n     * POST方式请求HTTP服务\n     *\n     * @param url\n     * @param header\n     * @param data\n     * @param encoding\n     * @param timeout\n     * @param processData\n     * @return\n     */\n    public HttpResponse post(String url, Map<String, String> header,\n                                    Object data, String encoding, int timeout, boolean processData)\n            throws Exception\n\n    /**\n     * HTTP请求请求\n     *\n     * @param url\n     * @param header\n     * @param data\n     * @param encoding\n     * @param timeout\n     * @param processData\n     * @return\n     */\n    public HttpResponse send(String url, Map<String, String> header,\n                                    Object data, String encoding, int timeout, boolean processData)\n            throws Exception \n    /**\n     * 请求服务\n     *\n     * @param url\n     * @param headers\n     * @param data\n     * @param encoding\n     * @param timeout\n     * @param processData\n     * @param traceId\n     * @return\n     */\n    public JSONObject request(String url, Map<String, String> headers,\n                                     Object data, String encoding, int timeout,\n                                     boolean processData, String traceId) \n\n\n    /**\n     * 远程文件是否存在\n     *\n     * @param address\n     * @param path\n     * @param timeout\n     * @return\n     * @apram name\n     */\n    public boolean isRemoteFileExists(String address, String name, String path, int timeout) throws Exception\n\n    /**\n     * 列举远程文件夹\n     *\n     * @param address\n     * @param name\n     * @param path\n     * @param timeout\n     * @return\n     */\n    public String[] listRemoteFile(String address, String name, String path, int timeout)\n            throws Exception\n\n    /**\n     * 列举远程文件夹\n     *\n     * @param address\n     * @param name\n     * @param path\n     * @param scale\n     * @param timeout\n     * @return\n     */\n    public String[] listRemoteFile(String address, String name, String path, String scale, int timeout)\n            throws Exception\n\n    /**\n     * 获取远程文件的大小\n     *\n     * @param address\n     * @param name\n     * @param path\n     * @param timeout\n     * @return\n     */\n    public long getRemoteFileSize(String address, String name, String path, int timeout) throws Exception \n    \n    /**\n     * 获取远程文件的MD5值\n     *\n     * @param address\n     * @param name\n     * @param path\n     * @param timeout\n     * @return\n     */\n    public String getRemoteFileStamp(String address, String name, String path, int timeout) throws Exception\n\n    /**\n     * 列举远程目录的MD5值\n     *\n     * @param address\n     * @param name\n     * @param path\n     * @param timeout\n     * @return\n     */\n    public String[] listRemoteFileStamps(String address, String name,\n                                                String path, int timeout) throws Exception \n\n\n    /**\n     * 列举远程目录的MD5值\n     *\n     * @param address\n     * @param name\n     * @param path\n     * @param scale\n     * @param timeout\n     * @return\n     */\n    public String[] listRemoteFileStamps(String address, String name,\n                                                String path, String scale, int timeout) throws Exception \n                                                \n    /**\n     * 直接下载文件\n     *\n     * @param url     (下载地址)\n     * @param data    (参数)\n     * @param out     (输出流)\n     * @param timeout (超时限制)\n     */\n    public boolean directDownload(String url, Map<String, String> data, OutputStream out, int timeout) throws Exception\n\n    /**\n     * 直接下载文件\n     *\n     * @param url             (下载地址)\n     * @param data            (参数)\n     * @param out             (输出流)\n     * @param timeout         (超时限制)\n     * @param method          (请求方法)\n     */\n    public boolean directDownload(String url,Map<String,String> data,\n                                         OutputStream out, int timeout, String method) throws Exception \n\n    /**\n     * 直接下载文件\n     *\n     * @param url             (下载地址)\n     * @param data            (参数)\n     * @param saveFile        (保存路径)\n     * @param timeout         (超时限制)\n     */\n    public boolean directDownload(String url,Map<String,String> data, File saveFile,\n                                         int timeout) throws Exception \n                                         \n    /**\n     * 直接下载文件\n     *\n     * @param url             (下载地址)\n     * @param data            (参数)\n     * @param saveFile        (保存路径)\n     * @param timeout         (超时限制)\n     * @param method          (请求method)\n     */\n    public boolean directDownload(String url,Map<String,String> data, File saveFile,\n                                         int timeout, String method) throws Exception\n\n    /**\n     * 上传文件\n     *\n     * @param address    (上传地址)\n     * @param uploadFile (上传文件)\n     * @param timeout    (超时限制)\n     */\n    public HttpResponse directUpload(String address, Map<String,String> params, File uploadFile, int timeout) throws Exception \n\n    /**\n     * 上传文件\n     * @param url\n     * @param fileName\n     * @param in\n     * @param params\n     * @param timeout\n     * @return\n     * \n     */\n    public HttpResponse directUpload(String url,String fileName, InputStream in,\n                                      Map<String,String> params, int timeout) throws Exception\n                                      \n    /**\n     * 下载文件\n     *\n     * @param address     (下载地址)\n     * @param name       （文件名）\n     * @param path        (下载文件)\n     * @param saveFile    (保存路径)\n     * @param timeout     (超时限制)\n     * @param thumbnail   (是否缩略图)\n     */\n    public boolean download(String address, String name, String path,\n                                   File saveFile, int timeout, boolean thumbnail) throws Exception \n             \n                                   、\n     * 下载文件\n     *\n     * @param address     (下载地址)\n     * @param name       （服务名）\n     * @param path        (下载文件)\n     * @param out         (输出流)\n     * @param timeout     (超时限制)\n     * @param thumbnail   (是否缩略图)\n     */\n    public boolean download(String address,String name, String path,\n                                   OutputStream out, int timeout, boolean thumbnail) throws Exception\n\n\n    /**\n     * 上传文件\n     *\n     * @param address     (上传地址)\n     * @param name        (服务名)\n     * @param savePath    (文件保存路径)\n     * @param uploadFile  (上传文件)\n     * @param timeout     (超时限制)\n     */\n    public boolean upload(String address, String name, String savePath,\n                                 String fileName, File uploadFile, int timeout)\n            throws Exception \n    /**\n     * 上传文件\n     *\n     * @param address     (上传地址)\n     *\n     * @param savePath    (文件保存路径)\n     * @param in          (输入流)\n     * @param timeout     (超时限制)\n     */\n    public boolean upload(String address, String name, String savePath,\n                                 String fileName, InputStream in, int timeout)\n            throws Exception \n            \n    /**\n     * 批量下载文件\n     *\n     * @param address           (下载地址)\n     * @param name              (服务名称)\n     * @param downloadDirectory (下载目录下)\n     * @param downloadFilePaths (下载目录下指定需要下载的文件路径)\n     * @param saveDir           (保存路径)\n     * @param checkValidity     (是否校验)\n     */\n    public boolean batchDownload(String address, String name, String downloadDirectory,\n                                        String[] downloadFilePaths, File saveDir, boolean checkValidity, int timeout)\n            throws Exception \n\n    /**\n     * 断点上传文件\n     *\n     * @param address\n     * @param name\n     * @param uploadPath\n     * @param fileName\n     * @param uploadFile\n     * @param timeout\n     * @param pageSize\n     * @param processContext\n     * @return\n     * \n     */\n    public boolean breakpointUpload(String address, String name,String uploadPath,\n                                           String fileName, File uploadFile, int timeout,\n                                           int pageSize, IProcess processContext) throws Exception\n\n    /**\n     * 上传文件片段\n     *\n     * @param address\n     * @param name\n     * @param path\n     * @param fileName\n     * @param content\n     * @param index\n     * @param length\n     * @param timeout\n     * @return\n     * \n     */\n    private boolean uploadSegment(String address, String name, String path,\n                                         String fileName, byte[] content, long index,\n                                         long length, long timeout) throws Exception \n                                         \n    /**\n     * 断点下载文件\n     *\n     * @param address     (下载地址)\n     * @param name        (名称)\n     * @param path        (文件路径以程序的安装目录文起点路径)\n     * @param saveFile    (保存目录)\n     * @param timeout\n     * @param pageSize    (页面大小KB)\n     * @param processContext\n     */\n    public boolean breakpointDownload(String address, String name, String path,\n                                             File saveFile,int timeout, int pageSize,\n                                             IProcess processContext) throws Exception \n")])]),n._v(" "),e("h2",{attrs:{id:"安全管理器-securitymanager"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安全管理器-securitymanager"}},[n._v("#")]),n._v(" 安全管理器 SecurityManager")]),n._v(" "),e("p",[n._v("安全管理器，提供获取加密/解密套件的接口。我们可以通过期提高了方法对内容进行加密或解密。")]),n._v(" "),e("h3",{attrs:{id:"securitymanager接口说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#securitymanager接口说明"}},[n._v("#")]),n._v(" SecurityManager接口说明")]),n._v(" "),e("pre",[e("code",[n._v("/**\n * 获取公共密钥套件\n * @return\n * \n */\npublic ICipher getPublicCipher() throws Exception\n\n/**\n * 获取秘钥套件\n * @param zpk\n * @return\n * \n */\npublic ICipher getCipher(String zpk) throws Exception \n\n/**\n * 获取秘钥套件\n * @param pair\n * @return\n */\npublic ICipher getCipher(SecKeyPair pair) throws Exception\n\n/**\n * 获取秘钥套件\n *\n * @param zpk\n * @return\n */\npublic ICipher getCipher(byte[] zpk) throws Exception\n")])]),n._v(" "),e("h3",{attrs:{id:"icipher接口说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#icipher接口说明"}},[n._v("#")]),n._v(" ICipher接口说明")]),n._v(" "),e("pre",[e("code",[n._v("    /**\n\t * 加密\n\t * @param content\n\t * @return\n\t * @throws\n\t */\n\tbyte[] encrypt(byte[] content) throws Exception;\n\n\t/**\n\t * 解密\n\t * @param content\n\t * @return\n\t * @throws\n\t */\n\tbyte[] decrypt(byte[] content) throws Exception;")])])])}),[],!1,null,null,null);t.default=r.exports}}]);