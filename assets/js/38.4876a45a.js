(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{603:function(t,n,e){"use strict";e.r(n);var r=e(1),i=Object(r.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"fox3-0-常用工具类介绍-ios"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fox3-0-常用工具类介绍-ios"}},[t._v("#")]),t._v(" Fox3.0 常用工具类介绍(IOS)")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#_1、configpreference-配置"}},[t._v("1、ConfigPreference 配置")])]),e("li",[e("a",{attrs:{href:"#_2、fileaccessor-文件访问器"}},[t._v("2、FileAccessor 文件访问器")])]),e("li",[e("a",{attrs:{href:"#_3、httprequester-http访问器"}},[t._v("3、HttpRequester HTTP访问器")]),e("ul",[e("li",[e("a",{attrs:{href:"#步骤一：获取应用对应的httprequester（session共享）"}},[t._v("步骤一：获取应用对应的HttpRequester（session共享）")])]),e("li",[e("a",{attrs:{href:"#步骤二：进行http通信，其接口如下"}},[t._v("步骤二：进行http通信，其接口如下")])])])]),e("li",[e("a",{attrs:{href:"#安全管理器-securitymanager"}},[t._v("安全管理器 SecurityManager")]),e("ul",[e("li",[e("a",{attrs:{href:"#securitymanager接口说明"}},[t._v("SecurityManager接口说明")])]),e("li",[e("a",{attrs:{href:"#icipher接口说明"}},[t._v("ICipher接口说明")])])])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"_1、configpreference-配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、configpreference-配置"}},[t._v("#")]),t._v(" 1、ConfigPreference 配置")]),t._v(" "),e("p",[t._v("ConfigPreference是Fox移动平台中获取和设置配置的工具类型，我们可以通过该工具类获取client.properties中的配置。")]),t._v(" "),e("p",[t._v("例如：\nclient.poperties配置如下：")]),t._v(" "),e("pre",[e("code",[t._v("#主工程\nweb/mainApp=fox\n\n#回退键事件\nweb/backAction=javascript:fox.custom.back()\n\n#安全配置\nsecurity/scopes=[Http]\n#security/scopes=[]\n\n#是否启用更新\nversion/updateEnabled=false\n\n#版本服务器地址\nversion/address=http://139.199.79.118:9705\n")])]),t._v(" "),e("p",[t._v("获取client.properties中的配置")]),t._v(" "),e("pre",[e("code",[t._v('//获取配置\nlet pref = ConfigPreference.instance\n//获取主应用名称\nlet mainAppName:String? =  pref.get(mark: "web", key: "mainApp")\n')])]),t._v(" "),e("h2",{attrs:{id:"_2、fileaccessor-文件访问器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、fileaccessor-文件访问器"}},[t._v("#")]),t._v(" 2、FileAccessor 文件访问器")]),t._v(" "),e("p",[t._v("FileAccessor文件访问器，为每个应用的沙箱提供了操作的接口。\n其使用方法如下：")]),t._v(" "),e("p",[t._v("步骤一：获取应用对应的FileAccessor")]),t._v(" "),e("pre",[e("code",[t._v(' //获取文件访问器\n let fileAccessor = FileAccessor.get(name: "应用名")\n')])]),t._v(" "),e("p",[t._v("步骤二：操作文件系统，常用接口如下")]),t._v(" "),e("pre",[e("code",[t._v(" //获取应用的根目录\n public func getRoot()->String\n    \n //获取应用下的文件路径\n public func getRootFilePath(path:String)-> String \n    \n //获取应用workspace\n public func getWorkspace()->String\n    \n //获取应用workspace下的文件路径\n public func getWorkspaceFilePath(path:String) -> String\n    \n //创建新的文件\n public func createNewFile(path:String) -> Bool\n    \n //设置最大循环数量\n public func setMaxCircleCount(count:Int)\n    \n //创建循环文件\n public func createCircleFile(parent:String, suffix:String) -> String?\n    \n //拷贝\n public func copy(atPath:String, toPath:String) -> Bool\n    \n //创建此抽象路径名指定的目录\n public func mkdir(path:String) -> Bool\n    \n //创建此抽象路径名指定的目录，包括创建必需但不存在的父目录\n public func mkdirs(path:String) -> Bool\n    \n //判断文件或文件夹是否存在\n public func exists(path:String)->Bool\n    \n //判断文件是否存在\n public func isFile(path:String)->Bool\n    \n //判断文件夹是否存在\n public func isDirectory(path:String)->Bool\n    \n //删除文件\n public func delete(path:String) -> Bool\n    \n //获取文件大小(如果目标文件不存在或为文件夹，则返回-1，否则返回大小)\n public func getSize(path:String) -> UInt64\n    \n //列举指定目录下面的文件列表\n public func list(path:String) -> [String]\n    \n //获取父亲目录\n public func getParentDirectory(path:String)-> String? \n    \n  //写入内容\n public func setContent(path:String, data:Data) -> Bool\n    \n //写入内容\n public func setContentAsString(path:String, str:String) ->  Bool\n    \n //写入内容(Base64)\n public func setContentAsBase64(path:String, str:String) ->  Bool\n    \n //获取内容\n public func getContent(path:String) -> Data?\n    \n //以字符串形式获取内容\n public func getContentAsString(path:String) -> String?\n    \n //以字符串(Base64)形式获取内容\n public func getContentAsBase64(path:String) -> String?\n")])]),t._v(" "),e("h2",{attrs:{id:"_3、httprequester-http访问器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、httprequester-http访问器"}},[t._v("#")]),t._v(" 3、HttpRequester HTTP访问器")]),t._v(" "),e("p",[t._v("Http访问器，为每个应用提供访问Fox Server的能力。其使用步骤如下：")]),t._v(" "),e("h3",{attrs:{id:"步骤一：获取应用对应的httprequester（session共享）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤一：获取应用对应的httprequester（session共享）"}},[t._v("#")]),t._v(" 步骤一：获取应用对应的HttpRequester（session共享）")]),t._v(" "),e("pre",[e("code",[t._v(' let httpRequester = HttpRequester.get("应用名")\n')])]),t._v(" "),e("h3",{attrs:{id:"步骤二：进行http通信，其接口如下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤二：进行http通信，其接口如下"}},[t._v("#")]),t._v(" 步骤二：进行http通信，其接口如下")]),t._v(" "),e("pre",[e("code",[t._v("//POST请求\npublic func request(method:HttpMethod, string:String, header:[String:String]?, data:[String:Any]?, timeout:Int = -1,  callback:@escaping(_ data:Data?, _ response:URLResponse?, _ error:Error?)->Void) -> HttpRequester\n\n//http请求\npublic func request(method:HttpMethod, url:URL, header:[String:String]?, data:Data?, timeout:Int = -1, callback:@escaping(_ data:Data?, _ response:URLResponse?, _ error:Error?)->Void) -> HttpRequester\n\n//ping测试\npublic func ping(address:String, timeout:Int) -> Bool\n\n//判断远程文件是否存在\npublic func isRemoteFileExists(address:String, name:String?, path:String, timeout:Int)throws -> Bool\n\n//列举远程文件列表\npublic func listRemoteFile(address:String, name:String?, path:String, scale:String?, timeout:Int) throws ->[String]\n\n//获取远程文件的大小\npublic func getRemoteFileSize(address:String, name:String?, path:String, timeout:Int) throws ->Int\n\n//获取远程文件的stamp值\npublic func getRemoteFileStamp(address:String, name:String?, path:String, timeout:Int) throws -> String\n\n//列举远程文件的md5 stamp\npublic func listRemoteFileStamps(address:String, name:String?, path:String, scale:String, timeout:Int)throws ->[String]\n\n//下载文件(异步下载)\npublic func download(address:String, name:String?, path:String, savePath:String, timeout:Int,\n                     thumbnail:Bool = false, callback:@escaping(_ code:Int, _ data:Any?)->Void) throws -> Void\n\n//下载文件\npublic func download(address:String, name:String?, path:String, savePath:String, timeout:Int, thumbnail:Bool = false) throws -> Bool\n\n//上传文件(异步上传)\npublic func upload(address:String, name:String?, path:String, fileName:String?,\n                   uploadPath:String, timeout:Int, callback:@escaping(_ code:Int, _ data:Any?)->Void) throws -> Void\n                   \n//上传文件\npublic func upload(address:String, name:String?, path:String, fileName:String?,\n                   uploadPath:String, timeout:Int) throws -> Bool\n\n//直接下载文件(异步下载)\npublic func directDownload(address:String, data:[String:Any], savePath:String, timeout:Int, callback:@escaping(_ code:Int, _ data:Any?)->Void) throws -> Void\n\n//直接下载文件\npublic func directDownload(address:String, data:[String:Any], savePath:String, timeout:Int) throws -> Bool\n\n//直接上传文件(异步上传)\npublic func directUpload(address:String, data:[String:Any],\n                         uploadFilePath:String, timeout:Int, callback:@escaping(_ code:Int, _ data:Any?)->Void) throws -> Void\n\n//直接上传文件\npublic func directUpload(address:String, data:[String:Any], uploadFilePath:String, timeout:Int) throws -> Bool\n\n//批量下载文件\npublic func batchDownload(address:String, name:String?, downloadDirectory:String,\n                          downloadFilePaths:[String], saveDir:String, checkValidity:Bool, timeout:Int)throws ->Bool\n                          \n//服务请求\npublic func service(path:String, headers:[String:String]?,\n                    data:[String:Any], timeout:Int, traceId:String, callback:@escaping(_ code:Int, _ data:Any?)->Void)\n                    \n//服务请求\npublic func service(path:String, headers:[String:String]?,\n                    string:String, timeout:Int, traceId:String, callback:@escaping(_ code:Int, _ data:Any?)->Void)\n")])]),t._v(" "),e("h2",{attrs:{id:"安全管理器-securitymanager"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安全管理器-securitymanager"}},[t._v("#")]),t._v(" 安全管理器 SecurityManager")]),t._v(" "),e("p",[t._v("安全管理器，提供获取加密/解密套件的接口。我们可以通过该对象提供的方法对内容进行加密或解密。")]),t._v(" "),e("h3",{attrs:{id:"securitymanager接口说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#securitymanager接口说明"}},[t._v("#")]),t._v(" SecurityManager接口说明")]),t._v(" "),e("pre",[e("code",[t._v("//获取公共加密套件\npublic func getPublicCipher()->ICipher\n\n//获取加密套件\npublic func getCipher(key:[UInt8])->ICipher\n\n//获取加密套件\npublic func getCipher(keyPair:SecKeyPair)->ICipher\n\n//获取加密套件\npublic func getCipher(keyStirng:String)->ICipher\n")])]),t._v(" "),e("h3",{attrs:{id:"icipher接口说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#icipher接口说明"}},[t._v("#")]),t._v(" ICipher接口说明")]),t._v(" "),e("pre",[e("code",[t._v("//加密\nfunc encrypt(data:Data) -> Data\n\n//解密\nfunc decrypt(data:Data) -> Data")])])])}),[],!1,null,null,null);n.default=i.exports}}]);